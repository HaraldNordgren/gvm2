#!/usr/bin/env bash
# scripts/update
#
# shellcheck shell=bash
# vi: set ft=bash
#

# load dependencies
dep_load()
{
    local base="$(builtin cd "$(dirname "${BASH_SOURCE[0]}")" && builtin pwd)"
    local deps; deps=(
        "../scripts/function/_bash_pseudo_hash.sh"
        "../scripts/function/_shell_compat.sh"
        "../scripts/function/display_notices.sh"
        "../scripts/function/locale_text.sh"
        "../scripts/function/semver_tools.sh"
    )
    for file in "${deps[@]}"
    do
        source "${base}/${file}"
    done
}; dep_load; unset -f dep_load

# __gvm_find_updates()
# /*!
# @abstract Find available GVM updates.
# @discussion
# Retrieves list of available GVM updates from a download source.
# @param source Url of download source.
# @return Returns a pseudo hash where keys are GVM versions and values are
#   download urls (status 0) or an empty string (status 1) on failure.
# @note Also sets global variable RETVAL to the same return value.
# */
__gvm_find_updates()
{
    local url="${1}"; shift
    local versions_hash; versions_hash=()
    local regex='^(v([0-9]+(\.[0-9]+[a-z0-9]*)*))$'
    unset RETVAL

    # # cache
    # if [[ -n "${__CACHE_GVM_FIND_UPDATES// /}" ]]
    # then
    #     RETVAL="${__CACHE_GVM_FIND_UPDATES}"
    #     printf "%s" "${__CACHE_GVM_FIND_UPDATES}"
    #     return 0
    # fi

    [[ "x${url}" == "x" ]] && RETVAL="" && echo "${RETVAL}" && return 1

    while IFS=$'\n' read -r _line; do
        if __gvm_rematch "${_line}" "${regex}"
        then
            local __key __val
            # GVM_REMATCH[1]: version name (e.g. v0.9.2)
            # GVM_REMATCH[2]: isolated version (e.g. 0.9.2)
            __key="${GVM_REMATCH[1]}"
            __val="${url}"
            {
                setValueForKeyFakeAssocArray "${__key}" "${__val}" "${versions_hash[*]}" > /dev/null
                versions_hash=( ${RETVAL} )
            }
            unset __key __val
        fi
    done <<< "$(\git ls-remote -t "${url}" | awk -F/ '{ print $NF }' | \sort -t. -k 1.2,1nr -k 2,2nr -k 3,3nr)"

    if [[ ${#versions_hash[@]} -eq 0 ]]
    then
        RETVAL="" && echo "${RETVAL}" && return 1
    fi

    RETVAL="${versions_hash[*]}"

    # cache
    # readonly __CACHE_GVM_FIND_UPDATES="${RETVAL}"

    echo "${RETVAL}" && return 0
}

# __gvm_find_latest()
# /*!
# @abstract Find latest available GVM version.
# @discussion
# Finds lastest GVM version available from a specific repo.
# @param source Url of download source.
# @return Returns string containing latest GVM version (status 0) or an empty
#   (status 1) on failure.
# @note Also sets global variable RETVAL to the same return value.
# */
__gvm_find_latest()
{
    local url="${1}"; shift
    local versions_hash; versions_hash=()

    [[ -z "${url// /}" ]] && RETVAL="" && echo "${RETVAL}" && return 1

    __gvm_find_updates "${url}" > /dev/null
    versions_hash=( ${RETVAL[@]} )

    if [[ ${#versions_hash[@]} -eq 0 ]]
    then
        RETVAL="" && echo "${RETVAL}" && return 1
    fi

    # grab the first entry in the hash (which is already sorted)
    local version_raw="${versions_hash[0]}"

    RETVAL="${version_raw%%:*}"

    echo "${RETVAL}" && return 1
}

list_updates()
{
    local opt_porcelain="${1}"; shift
    local opt_quiet="${1}"
    local updates_hash; updates_hash=()
    local repo_source="https://github.com/markeissler/gvm2"

    if [[ "${opt_porcelain}" == false && "${opt_quiet}" == false ]]
    then
        __gvm_locale_text_for_key "title/gvm_update_list" > /dev/null
        printf "\n%s\n\n" "${RETVAL}"
    fi

    __gvm_find_updates "${repo_source}" > /dev/null
    updates_hash=( ${RETVAL[@]} )

    if [[ -n "$GVM_DEBUG" ]]
    then
        printf "%s:\n" "${BASH_SOURCE[0]##*/}::list_updates() available updates dump"
        prettyDumpFakeAssocArray "${updates_hash[*]}"
    fi

    if [[ ${#updates_hash[@]} -eq 0 ]]
    then
        __gvm_locale_text_for_key "update_available_list_failed" > /dev/null
        __gvm_display_fatal "${RETVAL}"
        return 1
    fi

    local updates_hash_keys; updates_hash_keys=( $(keysForFakeAssocArray "${updates_hash[*]}") )
    local _version
    for _version in "${updates_hash_keys[@]}"
    do
        if [[ "${opt_porcelain}" == false ]]
        then
            printf "   %s\n" "${_version}"
        else
            printf "%s\n" "${_version}"
        fi
    done

    return 0
}

check_version()
{
    local version="${1}"
    local updates_hash; updates_hash=()
    local repo_source="https://github.com/markeissler/gvm2"

    [[ -z "${version// /}" ]] && return 1

    __gvm_find_updates "${repo_source}" > /dev/null
    updates_hash=( ${RETVAL[@]} )

    # validate requested version
    local updates_hash_keys; updates_hash_keys=( $(keysForFakeAssocArray "${updates_hash[*]}") )
    local _version
    for _version in "${updates_hash_keys[@]}"
    do
        [[ "${version}" == "${_version}" ]] && return 0
    done
    unset _version
    unset updates_hash_keys

    return 1
}

update()
{
    local version="${1:-latest}"; shift
    local opt_force="${1}"; shift
    local opt_porcelain="${1}"; shift
    local opt_quiet="${1}"
    local repo_source="https://github.com/markeissler/gvm2"
    local installer_source=""
    local install_dir="${GVM_ROOT%/*}"
    local install_name="${GVM_ROOT##*/}"
    local backup_dir="${GVM_ROOT}.bak"
    local charNewline=$'\n'

    if [[ "${version}" == "latest" ]]
    then
        __gvm_find_latest "${repo_source}" > /dev/null
        version="${RETVAL}"
        if [[ -z "${version// /}" ]]
        then
            __gvm_locale_text_for_key "update_find_latest_failed" > /dev/null
            __gvm_display_fatal "${RETVAL}"
        fi
        unset rslt
    else
        check_version "${version}" > /dev/null
        local rslt=$?
        if [[ $rslt -ne 0 ]]
        then
            __gvm_locale_text_for_key "update_version_invalid" > /dev/null
            __gvm_display_fatal "${RETVAL}"
        fi
        unset rslt
    fi

    # nothing to do if already on selected version (skip leading v if present)
    if [[ "${version#v*}" == "${GVM_VERSION#v*}" ]]
    then
        __gvm_locale_text_for_key "update_already_installed" > /dev/null
        __gvm_display_fatal "${RETVAL}: ${version}"
    fi

    # determine the installer_source url based on version
    installer_source="https://raw.githubusercontent.com/markeissler/gvm2/${version}/binscripts/gvm-installer"

    # we should not have a backup directory
    if [[ -d "${backup_dir}" ]]
    then
        __gvm_locale_text_for_key "update_backup_dir_exists" > /dev/null
        __gvm_display_fatal "${RETVAL}"
    fi

    # check install dir
    if [[ -z "${install_dir// /}" || ! -d "${install_dir}" ]]
    then
        __gvm_locale_text_for_key "update_install_dir_invalid" > /dev/null
        __gvm_display_fatal "${RETVAL}: ${install_dir}"
    fi

    # confirm is the user is about to switch to a non-updateable GVM2
    __gvm_extract_version "${version}" > /dev/null
    __gvm_compare_versions "${RETVAL}" "0.10.0" > /dev/null
    local rslt=$?
    if [[ "${opt_force}" == false && $rslt -gt 1 ]]
    then
        __gvm_locale_text_for_key "update_warning_old_version" > /dev/null
        __gvm_display_warning "${RETVAL}"
        __gvm_prompt_confirm > /dev/null
        if [[ $? -ne 0 ]]
        then
            if [[ "${opt_quiet}" == false ]]
            then
                __gvm_locale_text_for_key "action_cancelled" > /dev/null
                __gvm_display_message "${charNewline}${RETVAL}"
            fi
            return 0
        fi
        printf "%s" "${charNewLine}"
    fi

    #
    # Finally, do it
    #
    if [[ "${GVM_DEBUG}" -eq 1 ]]
    then
        printf "%s:\n" "${BASH_SOURCE[0]##*/}::update() updating with"
        echo "  GVM_ROOT       -> ${GVM_ROOT}"
        echo "  GVM_VERSION    -> ${GVM_VERSION}"
        echo "  _version       -> ${version}"
        echo "  _installer_url -> ${installer_source}"
        echo "  _repo_url      -> ${repo_source}"
        echo "  _backup_dir    -> ${backup_dir}"
        echo "  _install_dir   -> ${install_dir}/${_install_name}"
    fi

    if [[ "${opt_porcelain}" == false && "${opt_quiet}" == false ]]
    then
        # @TODO: update for locales
        local version_to_from_text="to ${version} (from v${GVM_VERSION})"
        __gvm_locale_text_for_key "title/gvm_update" > /dev/null
        printf "\n%s %s\n\n" "${RETVAL}" "${version_to_from_text}"
    fi

    #
    # collect some messages ahead of time as locales are about to be deleted!
    #
    __gvm_locale_text_for_key "update_backup_failed" > /dev/null
    local update_backup_failed_msg="${RETVAL}"

    __gvm_locale_text_for_key "update_install_failed" > /dev/null
    local update_install_failed_msg="${RETVAL}"

    __gvm_locale_text_for_key "update_restore_failed" > /dev/null
    local update_restore_failed_msg="${RETVAL}"

    __gvm_locale_text_for_key "update_cleanup_failed" > /dev/null
    local update_cleanup_failed_msg="${RETVAL}"

    __gvm_locale_text_for_key "update_failed" > /dev/null
    local update_failed_msg="${RETVAL}"

    __gvm_locale_text_for_key "update_succeeded" > /dev/null
    local update_success_msg="${RETVAL}"

    __gvm_locale_text_for_key "update_session_reload" > /dev/null
    local update_session_reload_msg="${RETVAL}"

    sleep 4

    [[ "${opt_quiet}" == false ]] && __gvm_progress "gvm_backup"
    mv "${GVM_ROOT}" "${backup_dir}" &> /dev/null
    if [[ $? -ne 0 ]]
    then
        __gvm_display_error "${update_backup_failed_msg}"
        __gvm_display_fatal "${update_failed_msg}"
    fi

    [[ "${opt_quiet}" == false ]] && __gvm_progress "gvm_install"
    \curl -sSL --retry 3 "${installer_source}" | bash -s "${version}" "${install_dir}" "${install_name}" &> /dev/null
    if [[ $? -ne 0 ]]
    then
        __gvm_display_error "${update_install_failed_msg}"
        __gvm_display_fatal "${update_failed_msg}"
    fi

    [[ "${opt_quiet}" == false ]] && __gvm_progress "gvm_restore"
    cp -Rp "${backup_dir}/"{archive,environments,gos,pkgsets} "${GVM_ROOT}/" &> /dev/null
    if [[ $? -ne 0 ]]
    then
        __gvm_display_error "${update_restore_failed_msg}"
        __gvm_display_fatal "${update_failed_msg}"
    fi

    [[ "${opt_quiet}" == false ]] && __gvm_progress "gvm_cleanup"
    rm -rf "${backup_dir}" &> /dev/null
    local rslt=$?
    if [[ $rslt -ne 0 ]]
    then
        __gvm_display_error "${update_cleanup_failed_msg}"
        __gvm_display_fatal "${update_failed_msg}"
    fi

    if [[ "${opt_quiet}" == false ]]
    then
        __gvm_display_message "${update_success_msg}"
        __gvm_display_warning "${update_session_reload_msg}!"
    fi

    return $rslt
}

_exit()
{
  stty sane; echo; __gvm_display_fatal "caught signal, shutting down"

  # @TODO: additional cleanup?

  wait; stty sane; exit 1
}

trap '_exit' SIGINT SIGQUIT SIGTERM

main()
{
    local opt_list=false
    local opt_force=false
    local opt_porcelain=false
    local opt_quiet=false
    local args; args=()
    local rslt

    if [[ -n "$GVM_DEBUG" ]] && [[ -n "$GVM_DEBUG_LEVEL" && "$GVM_DEBUG_LEVEL" -gt 1 ]]
    then
        set -x
    fi

    while true
    do
        case "${1}" in
            -l | --list )
                opt_list=true
                ;;
            -f | --force )
                opt_force=true
                ;;
            --porcelain )
                opt_porcelain=true
                ;;
            -q | --quiet )
                opt_quiet=true
                ;;
            -h | ? | help | --help )
                __gvm_locale_text_for_key "help/usage_update" > /dev/null
                printf "%s\n" "${RETVAL}"
                return 0
                ;;
            *)
                if [[ "${1:0:1}" == '-' ]]
                then
                    __gvm_locale_text_for_key "unrecognized_command" > /dev/null
                    printf "%s: %s\n\n" "${RETVAL}" "${1:-empty}"
                    __gvm_locale_text_for_key "help/usage_update" > /dev/null
                    printf "%s\n" "${RETVAL}"
                    return 1
                fi
                args+=( "${1}" )
                ;;
        esac
        # guard against accidents...
        shift; [[ "$#" -eq 0 ]] && break
    done

    # option sanity check
    if [[ "${opt_list}" == true && "${#args[@]}" -gt 0 ]]
    then
        __gvm_locale_text_for_key "invalid_arguments" > /dev/null
        printf "%s!\n\n" "${RETVAL}"
        __gvm_locale_text_for_key "help/usage_update" > /dev/null
        printf "%s\n" "${RETVAL}"
        return 1
    fi

    if [[ "${opt_list}" == true && "${opt_force}" == true ]]
    then
        __gvm_locale_text_for_key "invalid_arguments" > /dev/null
        printf "%s!\n\n" "${RETVAL}"
        __gvm_locale_text_for_key "help/usage_update" > /dev/null
        printf "%s\n" "${RETVAL}"
        return 1
    fi

    if [[ "${opt_list}" == true ]]
    then
        list_updates "${opt_porcelain}" "${opt_quiet}"; rslt=$?
    else
        update "${args[0]}" "${opt_force}" "${opt_porcelain}" "${opt_quiet}" ; rslt=$?
    fi

    if [[ -n "$GVM_DEBUG" ]] && [[ -n "$GVM_DEBUG_LEVEL" && "$GVM_DEBUG_LEVEL" -gt 1 ]]
    then
        set +x
    fi

    return "${rslt}"
}

main "$@"
