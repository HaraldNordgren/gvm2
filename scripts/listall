#!/usr/bin/env bash
#
# scripts/listall
#

# load dependencies
dep_load() {
    local base="$(builtin cd "$(dirname "${BASH_SOURCE[0]}")" && /bin/pwd)"
    local deps; deps=(
        "../scripts/function/_bash_pseudo_hash.sh"
        "../scripts/function/_shell_compat.sh"
        "../scripts/function/detect_runos.sh"
        "../scripts/function/display_notices.sh"
        "../scripts/function/locale_text.sh"
        "../scripts/function/detect_runos.sh"
        "../scripts/function/find_available.sh"
    )
    for file in "${deps[@]}"
    do
        source "${base}/${file}"
    done
}; dep_load; unset -f dep_load

list_all() {
    local os="${1}"; shift
    local source_url="${1}"; shift
    local opt_scope="${1:-source}"; shift # all, binary, source
    local opt_porcelain="${1}"; shift
    local opt_quiet="${1}"
    local filter='^(go([0-9]+(\.[0-9]+[a-z0-9]*)*))$' # all versions
    local filtered_list; filtered_list=()

    [[ -z "${os// /}" ]] && RETVAL="" && echo "${RETVAL}" && return 1

    # validate source_url exists
    if [[ -z "${source_url// /}" ]]
    then
        __gvm_locale_text_for_key "specify_listall_source_url" > /dev/null
        __gvm_display_fatal "${RETVAL}"
    fi

    # validate scope
    case "${opt_scope}" in
        all | binary | source )
            ;;
        *)
            __gvm_locale_text_for_key "listall_scope_invalid" > /dev/null
            __gvm_display_fatal "${RETVAL}"
            ;;
    esac

    # update filters if scope is set to "binary", default is "source"
    if [[ "${opt_scope}" == "binary" ]]
    then
        # go1 (go1.2.2, go1.3+)
        #
        # betaX and rcX revisions are not available as binaries!
        #
        filter_v1='^(go(1)(\.[1-9][0-9]+|\.[3-9])+(\.[0-9]+)?)$'
        # handle 1.2.2+ separately
        filter_v2='^(go(1).(2)(\.[2-9]+))$'
        # go2 (go2.0+)
        filter_v3='^(go(2)(\.[0-9]+)+(\.[a-z0-9]+)?)$'
        # combine them!
        filter="${filter_v1}|${filter_v2}|${filter_v3}"
    fi

    #
    # macOS fixups
    #
    if [[ "${os}" == "darwin" ]]
    then
        # Changes to macOS compilers as of macOS 10.12 (Sierra) prevent builds of:
        #
        #   < go1.4 (bootstrap)
        #   >= go1.5 < go1.7.1
        #
        # Binaries are still available for the affected versions.
        #
        if [[ "${opt_scope}" == "source" ]]
        then
            # go1 (go1.4, go1.7.1+)
            #
            # NOTE: gvm install will override any version of 1.4 to the current 1.4-bootstrap.
            #
            filter_v1='^(go(1)(\.[1-9][0-9]+|\.[8-9])+(\.[a-z0-9]+)?)$'
            # handle 1.4 separately
            filter_v2='^(go(1).(4)(\.[0-9]+)?)$'
            # handle 1.7.1+ separately
            filter_v3='^(go(1).(7)(\.[1-9]+))$'
            # go2 (go2.0+)
            filter_v4='^(go(2)(\.[0-9]+)+(\.[a-z0-9]+)?)$'
            # combine them!
            filter="${filter_v1}|${filter_v2}|${filter_v3}|${filter_v4}"
        fi
    fi

    #
    # Finally, do it
    #
    if [[ "${GVM_DEBUG}" -eq 1 ]]
    then
        printf "%s:\n" "${BASH_SOURCE[0]##*/}::list_all() running with"
        echo "  GOROOT         -> ${GOROOT}"
        echo "  GOOS           -> ${os}"
        echo "  _scope         -> ${opt_scope}"
        echo "  _source_url    -> ${source_url}"
    fi

    if [[ "${opt_porcelain}" == false && "${opt_quiet}" == false ]]
    then
        __gvm_locale_text_for_key "title/gvm_go_listall" > /dev/null
        printf "\n%s\n\n" "${RETVAL}"
    fi

    local available_hash; available_hash=( "$(__gvm_find_available "${source_url}")" )

    if [[ ${#available_hash[@]} -eq 0 ]]
    then
        __gvm_locale_text_for_key "title/listall_failed" > /dev/null
        __gvm_display_fatal "${RETVAL}"
        return 1
    fi

    local available_hash_keys; available_hash_keys=( $(keysForFakeAssocArray "${available_hash[*]}") )
    local _version
    for _version in "${available_hash_keys[@]}"
    do
        [[ "${_version}" =~ ${filter} ]] && filtered_list+=( "${_version}" )
    done
    unset _version
    unset available_hash_keys

    local _version
    for _version in "${filtered_list[@]}"
    do
        if [[ "${opt_porcelain}" == false ]]
        then
            printf "   %s\n" "${_version}"
        else
            printf "%s\n" "${_version/ }"
        fi
    done | sort -t. -k 1,1n -k 2,2n -k 3,3n
    unset _version

    if [[ "${opt_porcelain}" == false ]]
    then
        echo
    fi

    return 0
}

_exit()
{
  stty sane; echo; __gvm_display_fatal "caught signal, shutting down"

  # @TODO: additional cleanup?

  wait; stty sane; exit 1
}

trap '_exit' SIGINT SIGQUIT SIGTERM

main()
{
    local opt_scope="source"
    local opt_porcelain=false
    local opt_quiet=false
    local args; args=()
    local rslt

    if [[ -n "$GVM_DEBUG" ]] && [[ -n "$GVM_DEBUG_LEVEL" && "$GVM_DEBUG_LEVEL" -gt 1 ]]
    then
        set -x
    fi

    local _run_os
    local os os_version os_arch
    __gvm_detect_runos > /dev/null
    _run_os="${RETVAL}"
    os="${_run_os%%,*}"
    os_version="${_run_os#*,}"; os_version="${os_version%,*}"
    os_arch="${_run_os##*,}"
    unset _run_os

    local source_url="https://go.googlesource.com/go"

    while true
    do
        case "${1}" in
            -a | --all)
                opt_scope="all"
                ;;
            -B | --binary)
                opt_scope="binary"
                ;;
            -s | --source)
                opt_scope="source"
                ;;
            --porcelain )
                opt_porcelain=true
                ;;
            -q | --quiet )
                opt_quiet=true
                ;;
            -h | ? | help | --help )
                __gvm_locale_text_for_key "help/usage_listall" > /dev/null
                printf "%s\n" "${RETVAL}"
                return 0
                ;;
            *)
                if [[ "${1:0:1}" == '-' ]]
                then
                    __gvm_locale_text_for_key "unrecognized_command" > /dev/null
                    printf "%s: %s\n\n" "${RETVAL}" "${1:-empty}"
                    __gvm_locale_text_for_key "help/usage_listall" > /dev/null
                    printf "%s\n" "${RETVAL}"
                    return 1
                fi
                # only save arg if it contains more than spaces
                [[ -n "${1// /}" ]] && args+=( "${1}" )
                ;;
        esac
        # guard against accidents...
        shift; [[ "$#" -eq 0 ]] && break
    done

    list_all "${os}" "${source_url}" "${opt_scope}" "${opt_porcelain}" "${opt_quiet}"; rslt=$?

    if [[ -n "$GVM_DEBUG" ]] && [[ -n "$GVM_DEBUG_LEVEL" && "$GVM_DEBUG_LEVEL" -gt 1 ]]
    then
        set +x
    fi

    return "${rslt}"
}

main "$@"

